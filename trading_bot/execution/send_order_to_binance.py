import logging
from binance.client import Client
from binance.exceptions import BinanceAPIException
from trading_bot.execution.retry_utils import retry_on_binance_error

# C·∫•u h√¨nh log
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_binance_client(api_key: str, api_secret: str, use_testnet: bool = True) -> Client:
    """
    Kh·ªüi t·∫°o Binance Client cho testnet ho·∫∑c mainnet.
    """
    client = Client(api_key, api_secret)
    if use_testnet:
        client.API_URL = 'https://testnet.binancefuture.com/fapi'
    return client


def send_order(client: Client, symbol: str, side: str, order_type: str, quantity: float, max_retries=3, delay=1):
    """
    G·ª≠i l·ªánh Futures ƒë·∫øn Binance v·ªõi retry n·∫øu g·∫∑p l·ªói t·∫°m th·ªùi.

    Args:
        client (Client): Binance Client.
        symbol (str): V√≠ d·ª• "BTCUSDT".
        side (str): "BUY" ho·∫∑c "SELL".
        order_type (str): "MARKET", "LIMIT", v.v.
        quantity (float): S·ªë l∆∞·ª£ng c·∫ßn giao d·ªãch.
        max_retries (int): S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu l·ªói.
        delay (int): Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn retry.

    Returns:
        dict | None: L·ªánh n·∫øu th√†nh c√¥ng, None n·∫øu l·ªói.
    """
    def create_order():
        return client.futures_create_order(
            symbol=symbol,
            side=side,
            type=order_type,
            quantity=quantity
        )

    try:
        logger.info(f"üì§ G·ª≠i l·ªánh {side} {order_type}: {symbol} x {quantity}")
        order = retry_on_binance_error(create_order, max_retries=max_retries, delay=delay)
        logger.info(f"‚úÖ ƒê√£ g·ª≠i l·ªánh th√†nh c√¥ng: {order['orderId']}")
        return order
    except BinanceAPIException as e:
        logger.error(f"‚ùå Binance API l·ªói: {e.message}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
    return None
