# trading_bot/execution/position_manager.py

import logging
from binance.client import Client
from binance.exceptions import BinanceAPIException

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class PositionManager:
    def __init__(self, client: Client, symbol: str = "BTCUSDT"):
        self.client = client
        self.symbol = symbol.upper()
        self.position = self._fetch_position()

    def _fetch_position(self) -> dict or None:
        """L·∫•y th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i t·ª´ Binance Futures"""
        try:
            positions = self.client.futures_position_information(symbol=self.symbol)
            for p in positions:
                amt = float(p["positionAmt"])
                if amt != 0:
                    pos = {
                        "symbol": self.symbol,
                        "amount": amt,
                        "entry_price": float(p["entryPrice"]),
                        "side": "LONG" if amt > 0 else "SHORT",
                        "unrealized_pnl": float(p["unrealizedProfit"])
                    }
                    logger.info(f"‚úÖ ƒê√£ ph√°t hi·ªán v·ªã th·∫ø ƒëang m·ªü: {pos}")
                    return pos
        except BinanceAPIException as e:
            logger.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªã th·∫ø: {e}")
        return None

    def refresh(self):
        """C·∫≠p nh·∫≠t l·∫°i v·ªã th·∫ø hi·ªán t·∫°i"""
        self.position = self._fetch_position()

    def has_open_position(self) -> bool:
        """Ki·ªÉm tra xem c√≥ v·ªã th·∫ø ƒëang m·ªü kh√¥ng"""
        return self.position is not None

    def close_position(self, quantity: float = None) -> dict or None:
        """ƒê√≥ng v·ªã th·∫ø hi·ªán t·∫°i b·∫±ng l·ªánh ƒë·ªëi ·ª©ng"""
        if not self.has_open_position():
            logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ v·ªã th·∫ø ƒë·ªÉ ƒë√≥ng.")
            return None

        side = "SELL" if self.position["side"] == "LONG" else "BUY"
        qty = abs(self.position["amount"]) if quantity is None else quantity

        try:
            logger.info(f"üõë ƒêang g·ª≠i l·ªánh ƒë√≥ng v·ªã th·∫ø: {side} {qty} {self.symbol}")
            order = self.client.futures_create_order(
                symbol=self.symbol,
                side=Client.SIDE_BUY if side == "BUY" else Client.SIDE_SELL,
                type=Client.ORDER_TYPE_MARKET,
                quantity=qty
            )
            logger.info(f"‚úÖ ƒê√£ ƒë√≥ng v·ªã th·∫ø: {order}")
            self.position = None
            return order
        except BinanceAPIException as e:
            logger.error(f"‚ùå L·ªói khi ƒë√≥ng v·ªã th·∫ø: {e}")
            return None

    def get_unrealized_pnl(self) -> float:
        """L·∫•y PnL ch∆∞a ch·ªët (n·∫øu c√≥)"""
        return self.position.get("unrealized_pnl", 0.0) if self.position else 0.0

    def get_side(self) -> str or None:
        """L·∫•y h∆∞·ªõng c·ªßa v·ªã th·∫ø hi·ªán t·∫°i: LONG / SHORT"""
        return self.position.get("side") if self.position else None
